import unittest
from math_quiz import get_random_integer, get_random_operator, perform_calculation

class TestMathGame(unittest.TestCase):

    def test_get_random_integer(self):
        """
        Test if random numbers generated by get_random_integer are within the specified range.
        """
        min_val = 1
        max_val = 10
        for _ in range(1000):  # Test a large number of random values
            rand_num = get_random_integer(min_val, max_val)
            self.assertTrue(min_val <= rand_num <= max_val, f"Random number {rand_num} is out of range [{min_val}, {max_val}]")
        
    
    def test_get_random_operator(self):
        """
        Test if get_random_operator returns a valid operator ('+', '-', or '*').
        """
        valid_operators = ['+', '-', '*']
        for _ in range(1000):  # Test a large number of random values
            operator = get_random_operator()
            self.assertIn(operator, valid_operators, f"Operator {operator} is not valid.")

    def test_perform_calculation(self):
        """
        Test the perform_calculation function for different operators.
        """
        # Define test cases with input (num1, num2, operator) and expected output (problem, answer)
        test_cases = [
            (5, 2, '+', '5 + 2', 7),  # Test addition
            (10, 4, '-', '10 - 4', 6),  # Test subtraction
            (3, 5, '*', '3 * 5', 15),   # Test multiplication
            (0, 3, '+', '0 + 3', 3),    # Test with zero (edge case)
            (5, 0, '-', '5 - 0', 5),    # Test subtraction with zero
            (-3, 5, '*', '-3 * 5', -15) # Test with negative numbers
        ]

        for num1, num2, operator, expected_problem, expected_answer in test_cases:
            problem, answer = perform_calculation(num1, num2, operator)
            self.assertEqual(problem, expected_problem, f"Expected problem {expected_problem}, but got {problem}")
            self.assertEqual(answer, expected_answer, f"Expected answer {expected_answer}, but got {answer}")


if __name__ == "__main__":
    unittest.main()